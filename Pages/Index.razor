@page "/"
@using ReminderApp.Tablet.Models
@using ReminderApp.Tablet.Services
@inject ReminderApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Muistuttaja - @currentTime.ToString("HH:mm")</PageTitle>

<div style="min-height: 100vh; padding: 20px; background: #FFF8DC; font-family: Arial; font-size: 24px; color: #1B365D;">
    
    <!-- KELLO JA PÄIVÄMÄÄRÄ -->
    <div style="background: linear-gradient(135deg, #1B365D, #2E5984); color: white; padding: 40px; border-radius: 20px; text-align: center; margin-bottom: 30px; box-shadow: 0 8px 25px rgba(0,0,0,0.2);">
        <div style="font-size: 60px; font-weight: bold; margin-bottom: 10px;">@currentTime.ToString("dd.MM.yyyy")</div>
        <div style="font-size: 34px; margin: 10px 0;">@GetFinnishWeekday(currentTime)</div>
        <div style="font-size: 43px; font-weight: 600;">@currentTime.ToString("HH:mm")</div>
    </div>

    @if (isLoading)
    {
        <div style="text-align: center; padding: 50px;">
            <div style="font-size: 30px; margin-bottom: 20px;">⏳</div>
            <div>Ladataan muistutuksia...</div>
        </div>
    }
    else if (reminderData != null)
    {
        <!-- VIIMEISIN MUISTUTUS -->
        @if (!string.IsNullOrEmpty(reminderData.LatestReminder))
        {
            <div style="background: white; border: 3px solid #4A90E2; border-radius: 15px; padding: 30px; margin-bottom: 20px; box-shadow: 0 6px 20px rgba(0,0,0,0.1); text-align: center;">
                <div style="font-size: 38px; font-weight: bold; color: #1B365D; margin-bottom: 15px; border-bottom: 2px solid #4A90E2; padding-bottom: 10px;">💬 Viimeisin viesti</div>
                <div style="font-size: 34px; font-weight: 600; color: #2C3E50; line-height: 1.5; margin-bottom: 20px;">@reminderData.LatestReminder</div>
                <button @onclick="() => SpeakMessage(reminderData.LatestReminder)" 
                        style="background: #52C41A; border: none; border-radius: 50%; width: 80px; height: 80px; font-size: 32px; color: white; cursor: pointer; box-shadow: 0 4px 15px rgba(82, 196, 26, 0.4);">
                    🔊
                </button>
            </div>
        }

        <!-- TÄRKEA VIESTI -->
        @if (!string.IsNullOrEmpty(reminderData.ImportantMessage))
        {
            <div style="background: white; border: 3px solid #FF6B6B; border-radius: 15px; padding: 30px; margin-bottom: 20px; box-shadow: 0 6px 20px rgba(0,0,0,0.1); text-align: center;">
                <div style="font-size: 38px; font-weight: bold; color: #FF6B6B; margin-bottom: 15px;">📅 Tärkeä muistutus tänään</div>
                <div style="font-size: 34px; font-weight: 600; color: #2C3E50; line-height: 1.5;">@reminderData.ImportantMessage</div>
            </div>
        }

        <!-- KUVA -->
        @if (reminderData.Settings.UsePhotos && !string.IsNullOrEmpty(reminderData.DailyPhotoUrl))
        {
            <div style="background: white; border-radius: 15px; padding: 20px; text-align: center; box-shadow: 0 4px 15px rgba(0,0,0,0.1); margin-bottom: 20px;">
                <img src="@reminderData.DailyPhotoUrl" alt="Päivän kuva" style="max-width: 100%; height: auto; border-radius: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.2); margin-bottom: 15px;" />
                <div style="font-size: 29px; font-weight: 600; color: #1B365D;">@reminderData.DailyPhotoCaption</div>
            </div>
        }

        <!-- SÄÄ -->
        <div style="background: linear-gradient(135deg, #87CEEB, #4A90E2); color: white; padding: 25px; border-radius: 15px; text-align: center; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
            <div style="font-size: 72px; margin-bottom: 10px;">@GetWeatherIcon(reminderData.Weather.Description)</div>
            <div style="font-size: 31px; font-weight: 600;">@reminderData.Weather.Description</div>
        </div>

        <!-- YHTEYSTIEDOT -->
        @if (reminderData.Contacts?.Any() == true)
        {
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px;">
                @foreach (var contact in reminderData.Contacts)
                {
                    <button @onclick="() => CallContact(contact.Phone)" 
                            style="background: #4A90E2; color: white; border: none; border-radius: 15px; padding: 25px 20px; font-size: 31px; font-weight: 600; cursor: pointer; box-shadow: 0 6px 20px rgba(74, 144, 226, 0.3); text-align: center;">
                        <div style="margin-bottom: 5px;">📞 Soita: @contact.Name</div>
                        <div style="font-size: 28px; opacity: 0.9;">@contact.Phone</div>
                    </button>
                }
            </div>
        }
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="background: #FFF1F0; border: 3px solid #FF4D4F; border-radius: 15px; padding: 30px; text-align: center;">
            <div style="font-size: 38px; color: #FF4D4F; margin-bottom: 15px;">⚠️ Yhteysvirhe</div>
            <div style="font-size: 24px; margin-bottom: 20px;">@errorMessage</div>
            <button @onclick="LoadData" style="background: #FF4D4F; color: white; border: none; border-radius: 15px; padding: 20px 40px; font-size: 24px; cursor: pointer;">
                🔄 Yritä uudelleen
            </button>
        </div>
    }

    <!-- HÄTÄPAINIKE -->
    <div style="text-align: center; margin-top: 30px;">
        <button @onclick="EmergencyCall" 
                style="background: #FF4D4F; color: white; border: none; border-radius: 20px; padding: 30px 50px; font-size: 36px; font-weight: bold; cursor: pointer; box-shadow: 0 8px 25px rgba(255, 77, 79, 0.4); text-transform: uppercase; letter-spacing: 1px;">
            🆘 HÄTÄ - SOITA APUA
        </button>
    </div>
</div>

@code {
    private ReminderApiResponse? reminderData;
    private bool isLoading = true;
    private string errorMessage = "";
    private DateTime currentTime = DateTime.Now;
    private Timer? clockTimer;

    protected override async Task OnInitializedAsync()
    {
        // Käynnistä kello
        clockTimer = new Timer(UpdateClock, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        
        // Lataa data
        await LoadData();
        
        // Päivitä data 30 sekunnin välein
        var dataTimer = new Timer(async _ => await LoadData(), null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();
            
            reminderData = await ApiService.GetReminderDataAsync("mom");
            
            if (!string.IsNullOrEmpty(reminderData?.Error))
            {
                errorMessage = $"API-virhe: {reminderData.Error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Virhe ladattaessa tietoja: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateClock(object? state)
    {
        currentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    private string GetFinnishWeekday(DateTime date)
    {
        return date.DayOfWeek switch
        {
            DayOfWeek.Monday => "Maanantai",
            DayOfWeek.Tuesday => "Tiistai", 
            DayOfWeek.Wednesday => "Keskiviikko",
            DayOfWeek.Thursday => "Torstai",
            DayOfWeek.Friday => "Perjantai",
            DayOfWeek.Saturday => "Lauantai",
            DayOfWeek.Sunday => "Sunnuntai",
            _ => "Tuntematon"
        };
    }

    private string GetWeatherIcon(string description)
    {
        var desc = description.ToLower();
        if (desc.Contains("aurinko") || desc.Contains("kirkas")) return "☀️";
        if (desc.Contains("sade") || desc.Contains("sateinen")) return "🌧️";
        if (desc.Contains("lumi") || desc.Contains("luminen")) return "❄️";
        if (desc.Contains("pilvi")) return "☁️";
        if (desc.Contains("utu") || desc.Contains("sumu")) return "🌫️";
        return "🌤️";
    }

    private async Task SpeakMessage(string message)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("speakText", message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Text-to-speech error: {ex.Message}");
        }
    }

    private async Task CallContact(string phoneNumber)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("makeCall", phoneNumber);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Call error: {ex.Message}");
        }
    }

    private async Task EmergencyCall()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("makeCall", "112");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Emergency call error: {ex.Message}");
        }
    }

    public void Dispose()
    {
        clockTimer?.Dispose();
    }
}