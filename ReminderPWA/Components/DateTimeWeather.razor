@using ReminderTabletNew2.Models
@using System.Globalization

<div class="header-section">
    <div class="time-container">
        <div class="date-text">@GetFinnishDate()</div>
        
        <div class="time-main">
            <div class="main-time">@CurrentTime.ToString("HH:mm")</div>
            <div class="time-period">@TimeOfDayText</div>
        </div>
        
        @* Säätietoon parannettu näkyvyys *@
        <div class="weather-compact">
            @if (Weather != null)
            {
                <span class="weather-icon">@GetWeatherIcon(Weather.Description)</span>
                <div class="weather-info">
                    <span class="weather-temp">@Weather.Temperature</span>
                    <span class="weather-desc">@GetFinnishWeatherDescription(Weather.Description)</span>
                </div>
            }
            else
            {
                <span class="weather-icon">🌤️</span>
                <div class="weather-info">
                    <span class="weather-temp">22°C</span>
                    <span class="weather-desc">Ladataan säätietoja...</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public required DateTime CurrentTime { get; set; }
    [Parameter] public required string TimeOfDayText { get; set; }
    [Parameter] public Weather? Weather { get; set; }

    private string GetFinnishDate()
    {
        // Manuaaliset käännökset varmistaaksemme suomenkielisyyden
        var finnishDays = new[] { "Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai" };
        var finnishMonths = new[] { "", "tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", 
                                   "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu" };
        
        var dayName = finnishDays[(int)CurrentTime.DayOfWeek];
        var monthName = finnishMonths[CurrentTime.Month];
        
        return $"{dayName} {CurrentTime.Day}. {monthName} {CurrentTime.Year}";
    }

    private string GetWeatherIcon(string? description)
    {
        if (string.IsNullOrEmpty(description)) return "🌤️";
        
        var desc = description.ToLower();
        
        // Paremmat ja värikkäämmät ikonit
        if (desc.Contains("aurinko") || desc.Contains("kirkas") || desc.Contains("selkeä")) return "☀️";
        if (desc.Contains("loistava") || desc.Contains("upea")) return "🌞";
        if (desc.Contains("pilvi") || desc.Contains("pilvinen")) return "⛅";
        if (desc.Contains("sade") || desc.Contains("sateinen")) return "🌦️";
        if (desc.Contains("lumi") || desc.Contains("luminen")) return "🌨️";
        if (desc.Contains("usva") || desc.Contains("sumu")) return "🌫️";
        if (desc.Contains("myrsky") || desc.Contains("ukkonen")) return "⛈️";
        if (desc.Contains("tuuli") || desc.Contains("tuulinen")) return "🌬️";
        if (desc.Contains("kylmä") || desc.Contains("pakkanen")) return "🥶";
        if (desc.Contains("kuuma") || desc.Contains("helle")) return "🔥";
        
        return "🌤️";
    }

    private string GetFinnishWeatherDescription(string? description)
    {
        if (string.IsNullOrEmpty(description)) return "Sää ei tiedossa";
        
        var desc = description.ToLower();
        
        // Käännökset suomeksi
        if (desc.Contains("clear sky")) return "Selkeää";
        if (desc.Contains("few clouds")) return "Vähän pilviä";
        if (desc.Contains("scattered clouds")) return "Hajanaisia pilviä";
        if (desc.Contains("broken clouds")) return "Melko pilvistä";
        if (desc.Contains("overcast clouds")) return "Pilvistä";
        if (desc.Contains("light rain")) return "Heikkoa sadetta";
        if (desc.Contains("moderate rain")) return "Kohtalaista sadetta";
        if (desc.Contains("heavy rain")) return "Rankka sade";
        if (desc.Contains("shower rain")) return "Sadekuuroja";
        if (desc.Contains("thunderstorm")) return "Ukkosta";
        if (desc.Contains("snow")) return "Lumisadetta";
        if (desc.Contains("mist") || desc.Contains("fog")) return "Sumua";
        if (desc.Contains("haze")) return "Utuista";
        
        // Jos ei löydy käännöstä, palautetaan alkuperäinen
        return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(description);
    }

    private bool IsGoodForOutdoor(string? description)
    {
        if (string.IsNullOrEmpty(description)) return true;
        var desc = description.ToLower();
        
        // Hyvä ulkoiluilma
        return desc.Contains("clear") || desc.Contains("few clouds") || 
               desc.Contains("selkeä") || desc.Contains("aurinko");
    }

    private bool IsRaining(string? description)
    {
        if (string.IsNullOrEmpty(description)) return false;
        var desc = description.ToLower();
        
        // Sateinen sää
        return desc.Contains("rain") || desc.Contains("shower") || 
               desc.Contains("sade") || desc.Contains("sateinen");
    }

    private bool IsSnowing(string? description)
    {
        if (string.IsNullOrEmpty(description)) return false;
        var desc = description.ToLower();
        
        // Lumisade
        return desc.Contains("snow") || desc.Contains("lumi");
    }
}