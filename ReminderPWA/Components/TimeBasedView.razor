@using ReminderTabletNew2.Models
@using ReminderTabletNew2.Services
@inject Microsoft.JSInterop.IJSRuntime JS
@implements IDisposable

<div class="mobile-container @GetViewCssClass()">
    <!-- Header Section -->
    <DateTimeWeather CurrentTime="@CurrentTime" 
                     TimeOfDayText="@GetTimeOfDayText()" 
                     Weather="@ApiResponse?.Weather" />

    <!-- Content Area -->
    <div class="content-area">
        @* Viestikenttä näkyy vain kun on oikea viesti *@
        @if (!string.IsNullOrEmpty(GetContextualMessage()))
        {
            <MessageNotification Message="@GetContextualMessage()" 
                               MessageTimestamp="@GetMessageTimestamp()" 
                               IsNewMessage="@IsNewMessage" />
        }

        @* Tehtäväkentät erillisessä komponentissa *@
        <TaskField 
            Tasks="GetFilteredTasks()" 
            TimeOfDayText="@GetTimeOfDayText()" 
            DefaultActivityText="@GetActivitySuggestion()"
            OnTaskAcknowledge="HandleTaskAcknowledge" />

        @* Tärkeä viesti (jos on) *@
        <ImportantBanner ImportantMessage="@ApiResponse?.ImportantMessage" />
        
        @* Poistettu erillinen "Puuhaa nyt" -kortti. Puuhaa näytetään tehtäväkorttina. *@

        @* Ruokaehdotus ateriaikkunassa *@
        @if (HasMealSuggestions())
        {
            <MealSuggestion NextMealType="@ApiResponse?.NextMealType"
                            NextMealTime="@ApiResponse?.NextMealTime"
                            MealOptions="@ApiResponse?.MealOptions"
                            Config="@new AppConfig { FeatureFlags = new FeatureFlags { ShowMealOptionsList = false } }" />
        }
        else
        {
            <!-- Fallback ruokaehdotus, jos backend ei palauta -->
            <MealSuggestion NextMealType="@(GetTimeOfDayText() switch { "Aamu" => "aamupala", "Päivä" => "lounas", "Ilta" => "päivällinen", _ => "yöpala" })"
                            NextMealTime="@(GetTimeOfDayText() switch { "Aamu" => "08:00-09:00", "Päivä" => "11:00-14:00", "Ilta" => "17:00-18:00", _ => "20:00-21:30" })"
                            MealOptions="@(new [] { "kaurapuuro marjoilla", "kanasalaatti", "tomaattipasta" })"
                            Config="@new AppConfig { FeatureFlags = new FeatureFlags { ShowMealOptionsList = false } }" />
        }

        @* Päivän valokuva *@
        <DailyPhoto ApiPhotoUrl="@ApiResponse?.DailyPhotoUrl"
                   ApiPhotoCaption="@ApiResponse?.DailyPhotoCaption"
                   FallbackUrl="@GetFallbackPhotoUrl()"
                   OnPhotoClick="OnPhotoClickHandler" />
        
        @* Footer toiminnot *@
        <ActionFooter OnNavigateToWeekly="OnNavigateToWeekly"
                     OnNavigateToContacts="OnNavigateToContacts"
                     OnStartExercise="OnStartExercise"
                      OnSendMessage="ShowTelegramFromFooter"
                       OnClearCache="ClearCacheFromFooter"
                      ShowSendMessage="false" />
    </div>
</div>

<ImageModal IsVisible="@showImageModal" 
            ImageSrc="@modalImageSrc" 
            ImageAlt="@modalImageAlt"
            ImageTitle="Päivän kuvamuisto"
            ImageCaption="@modalImageCaption"
            OnClose="CloseImageModal" />

@code {
    [Parameter] public required ViewMode TimeOfDay { get; set; }
    [Parameter] public required DateTime CurrentTime { get; set; }
    [Parameter] public ReminderApiResponse? ApiResponse { get; set; }
    [Parameter] public EventCallback<TaskAckRequest> OnAcknowledgeTask { get; set; }
    [Parameter] public EventCallback OnNavigateToWeekly { get; set; }
    [Parameter] public EventCallback OnNavigateToContacts { get; set; }
    [Parameter] public EventCallback OnStartExercise { get; set; }
    [Parameter] public EventCallback OnShowTelegram { get; set; }
    [Parameter] public EventCallback OnRequestReload { get; set; }
    [Parameter] public bool IsNewMessage { get; set; } = false;

    public enum ViewMode
    {
        Morning,     // 06:00-11:00
        Day,         // 11:00-16:00
        Evening,     // 16:00-21:00
        Night        // 21:00-06:00
    }

    public class TaskAckRequest
    {
        public string TaskType { get; set; } = "";
        public string TimeOfDay { get; set; } = "";
        public string Description { get; set; } = "";
    }

    // Image modal state
    private bool showImageModal = false;
    private string modalImageSrc = "";
    private string modalImageAlt = "";
    private string modalImageCaption = "";

    private string GetViewCssClass()
    {
        return TimeOfDay switch
        {
            ViewMode.Morning => "morning-view",
            ViewMode.Day => "day-view", 
            ViewMode.Evening => "evening-view",
            ViewMode.Night => "night-view",
            _ => "morning-view"
        };
    }

    private string GetTimeOfDayText()
    {
        return TimeOfDay switch
        {
            ViewMode.Morning => "Aamu",
            ViewMode.Day => "Päivä",
            ViewMode.Evening => "Ilta", 
            ViewMode.Night => "Yö",
            _ => "Aamu"
        };
    }

    private string GetMessageTimestamp()
    {
        return TimeOfDay switch
        {
            ViewMode.Morning => "Viesti saapui 08:00",
            ViewMode.Day => "Viesti saapui 12:00", 
            ViewMode.Evening => "Viesti saapui 16:00",
            ViewMode.Night => "Viesti saapui 21:00",
            _ => "Viesti saapui juuri"
        };
    }

    private string GetContextualMessage()
    {
        var message = ApiResponse?.LatestReminder;
        
        // Suodatetaan pois ei-toivotut viestit
        if (!string.IsNullOrEmpty(message))
        {
            // Estä "Tervetuloa!" ja muut ei-toivotut viestit
            if (message.Contains("Tervetuloa") || 
                message.Contains("Welcome") || 
                message.Contains("tervetuloa"))
            {
                return string.Empty;
            }
            
            return message;
        }

        return string.Empty;
    }

    private string GetActivitySuggestion()
    {
        // Fallback-tekstiä tarvitaan harvoin, koska PUUHAA renderöidään tehtävissä.

        var weather = ApiResponse?.Weather?.Description ?? "";
        return TimeOfDay switch
        {
            ViewMode.Morning => $"Aamun lehden lukemista tai pieni ulkoilukierros. {weather}",
            ViewMode.Day => $"Ihanaa päiväsaikaa - ehkä ulkoilua tai käsitöitä? {weather}",
            ViewMode.Evening => $"Aivojumppa yhdessä tai rauhallista television katselua.",
            ViewMode.Night => $"Rentoutumista ja hyvän yön valmistelua.",
            _ => $"Nauti tästä hetkestä! {weather}"
        };
    }

    // Ei erillistä activity-korttia enää

    private bool HasMealSuggestions() => (ApiResponse?.MealOptions?.Any() ?? false);

    private string GetApiString(string name) => string.Empty; // ei tarvita enää
    private IEnumerable<string> GetApiStringArray(string name) => Enumerable.Empty<string>();

    private string GetFallbackPhotoUrl()
    {
        var profile = ApiResponse?.ProfilePhoto?.Url;
        if (!string.IsNullOrWhiteSpace(profile)) return profile!;
        var firstWeekly = ApiResponse?.WeeklyPhotos?.FirstOrDefault()?.Url;
        return firstWeekly ?? string.Empty;
    }

    private IEnumerable<DailyTask> GetFilteredTasks()
    {
        if (ApiResponse?.DailyTasks == null) return [];
        
        // Filter tasks based on time of day
        return ApiResponse.DailyTasks.Where(task => IsTaskRelevantForTime(task));
    }

    private async Task OnPhotoClickHandler(DailyPhoto.PhotoClickArgs args)
    {
        OpenImageModal(args.ImageUrl, args.Caption);
    }

    private void OpenImageModal(string imageSrc, string caption)
    {
        modalImageSrc = imageSrc;
        modalImageAlt = caption;
        modalImageCaption = caption;
        showImageModal = true;
        StateHasChanged();
    }

    private void CloseImageModal()
    {
        showImageModal = false;
        StateHasChanged();
    }

    private async Task ShowTelegramFromFooter()
    {
        if (OnShowTelegram.HasDelegate)
        {
            await OnShowTelegram.InvokeAsync();
        }
    }

    private async Task ClearCacheFromFooter()
    {
        try
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "lastApiResponse");
            await JS.InvokeVoidAsync("localStorage.removeItem", "recentAcks");
            await JS.InvokeVoidAsync("console.log", "Cache cleared from footer");
            if (OnRequestReload.HasDelegate)
            {
                await OnRequestReload.InvokeAsync();
            }
        }
        catch {}
    }

    private bool IsTaskRelevantForTime(DailyTask task)
    {
        // Ensisijaisesti käytetään task.TimeOfDay API:sta
        if (!string.IsNullOrEmpty(task.TimeOfDay))
        {
            var taskTimeOfDay = task.TimeOfDay;
            
            return TimeOfDay switch
            {
                ViewMode.Morning => taskTimeOfDay.Equals("Aamu", StringComparison.OrdinalIgnoreCase),
                ViewMode.Day => taskTimeOfDay.Equals("Päivä", StringComparison.OrdinalIgnoreCase), 
                ViewMode.Evening => taskTimeOfDay.Equals("Ilta", StringComparison.OrdinalIgnoreCase),
                ViewMode.Night => taskTimeOfDay.Equals("Yö", StringComparison.OrdinalIgnoreCase),
                _ => true
            };
        }
        
        // Fallback: käytetään task.Type:a (vanha logiikka)
        var taskType = task.Type.ToUpper();
        
        return TimeOfDay switch
        {
            ViewMode.Morning => taskType.Contains("RUOKA") || taskType.Contains("LÄÄKKEET") || taskType.Contains("AAMU"),
            ViewMode.Day => taskType.Contains("LOUNAS") || taskType.Contains("PÄIVÄ") || taskType.Contains("RUOKA") || taskType.Contains("LÄÄKKEET") || taskType.Contains("ASIAT") || (!taskType.Contains("ILTA") && !taskType.Contains("YÖ")),
            ViewMode.Evening => taskType.Contains("RUOKA") || taskType.Contains("LÄÄKKEET") || taskType.Contains("PUUHAA") || taskType.Contains("ILTA") || taskType.Contains("PÄIVÄLLINEN"),
            ViewMode.Night => taskType.Contains("ILTAPALA") || taskType.Contains("LÄÄKKEET") || taskType.Contains("YÖ"),
            _ => true
        };
    }
    
    private async Task HandleTaskAcknowledge(DailyTask task)
    {
        var timeOfDay = !string.IsNullOrEmpty(task.TimeOfDay) ? task.TimeOfDay : GetTimeOfDayText();

        Console.WriteLine($"🔧 Acknowledging task: {task.Type} - '{task.Description}' - Original TimeOfDay: '{task.TimeOfDay}' - Using: '{timeOfDay}'");

        // Optimistinen UI: merkitse heti kuitatuksi, jotta nappi vaihtuu visuaalisesti
        try
        {
            task.IsAckedToday = true;
            task.AcknowledgmentTimestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            StateHasChanged();
        }
        catch { /* ignore */ }

        await OnAcknowledgeTask.InvokeAsync(new TaskAckRequest {
            TaskType = task.Type,
            TimeOfDay = timeOfDay,
            Description = task.Description ?? ""
        });
    }

    // PARAS KÄYTÄNTÖ: IDisposable pattern
    public void Dispose()
    {
        // Tulevaisuudessa: unsubscribe events, cancel timers, dispose resources
        // Esim: timer?.Dispose();
    }
} 