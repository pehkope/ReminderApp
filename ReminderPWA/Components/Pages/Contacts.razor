@page "/contacts"
@using ReminderTabletNew2.Services
@inject ApiService ApiService
@using ReminderTabletNew2.Models
@using System.Text.Json
@inject NavigationManager Navigation

<SwipeContainer OnSwipe="HandleSwipe" CssClass="contacts-swipe-container">
    <div class="contacts-page">
        <div class="header">
            <h2>üìû SOITA PERHE</h2>
            <button class="back-button" @onclick="GoBack">‚Üê Takaisin</button>
        </div>
        
        <div class="contacts-content">
        @if (apiResponse?.Contacts?.Any() == true)
        {
            @foreach (var contact in apiResponse.Contacts)
            {
                <div class="contact-item">
                    @if (!string.IsNullOrEmpty(contact.PhotoUrl))
                    {
                        <div class="contact-photo">
                            <img src="@contact.PhotoUrl" alt="@contact.Name" 
                                 @onload="@(() => Console.WriteLine($"Contact photo loaded: {contact.Name}"))"
                                 @onerror="@(() => Console.WriteLine($"Contact photo failed: {contact.Name}"))" />
                        </div>
                    }
                    <div class="contact-info">
                        <div class="name">@contact.Name @if(!string.IsNullOrEmpty(contact.TelegramChatID)){<span class="tg-badge">TG</span>}</div>
                        <div class="phone">üì± @contact.Phone</div>
                        @if (!string.IsNullOrEmpty(contact.Relationship))
                        {
                            <div class="relationship">@contact.Relationship</div>
                        }
                    </div>
                    @if (!string.IsNullOrWhiteSpace(contact.Phone))
                    {
                        <a class="call-button" href="@($"tel:{contact.Phone}")">
                            üìû Soita
                        </a>
                    }
                    else
                    {
                        <button class="call-button" disabled>
                            üìû Soita
                        </button>
                    }
                    <button class="msg-button" @onclick="() => MessageContact(contact)" disabled="@string.IsNullOrEmpty(contact.TelegramChatID)">
                        üí¨ Viesti
                    </button>
                </div>
            }
        }
        else
        {
            <div class="no-contacts">
                <p>Yhteystietoja ei l√∂ytynyt.</p>
                <p>Tarkista Google Sheets -asetukset.</p>
            </div>
        }
        </div>
    </div>
</SwipeContainer>

@code {
    private ReminderApiResponse? apiResponse;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var result = await ApiService.GetDataAsync("mom", maxRetries: 1, timeoutOverrideSeconds: 6);
            if (result.IsSuccess)
                apiResponse = result.Data;
            
            // If no contacts from API, add temporary test contacts
            if (apiResponse?.Contacts?.Any() != true)
            {
                Console.WriteLine("=== NO CONTACTS FOUND ===");
                
                if (apiResponse == null)
                    apiResponse = new ReminderApiResponse();
                    
                apiResponse.Contacts = new List<Contact>
                {
                    new Contact { Name = "Petri (poika)", Phone = "+358401234567" },
                    new Contact { Name = "Tiita (tyt√§r)", Phone = "+358501234568" },
                    new Contact { Name = "Sisko (sisar)", Phone = "+358451234569" },
                    new Contact { Name = "Yst√§v√§ Liisa", Phone = "+358401234570" },
                    new Contact { Name = "Naapuri Marja", Phone = "+358501234571" },
                    new Contact { Name = "H√§t√§numero", Phone = "112" }
                };
                
                Console.WriteLine("Added temporary test contacts");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            
            // Create emergency fallback
            apiResponse = new ReminderApiResponse
            {
                Contacts = new List<Contact>
                {
                    new Contact { Name = "H√§t√§numero", Phone = "112" },
                    new Contact { Name = "Perhe", Phone = "+358401234567" }
                }
            };
        }
    }

    // Direct tel: link used in markup

    private async Task MessageContact(Contact contact)
    {
        // Avaa TelegramSender suoraan t√§lle contactille
        await JS.InvokeVoidAsync("localStorage.setItem", "prefillTelegramChatId", contact.TelegramChatID ?? "");
        Navigation.NavigateTo("/", forceLoad: false);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private Task HandleSwipe(string direction)
    {
        if (direction == "left")
        {
            // Left swipe - go back to main page
            GoBack();
        }
        return Task.CompletedTask;
    }
} 