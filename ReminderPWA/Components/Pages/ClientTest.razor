@page "/client-test"
@using ReminderTabletNew2.Models
@using ReminderTabletNew2.Services
@inject ClientConfigService ClientConfigService
@inject NavigationManager Navigation

<div class="client-test-container">
    <h2>üß™ Multi-Client Testi</h2>
    
    <div class="client-selector">
        <h3>Valitse asiakas:</h3>
        @foreach (var client in availableClients)
        {
            <div class="client-card @(selectedClientId == client.ClientId ? "selected" : "")" 
                 @onclick="() => SelectClient(client.ClientId)">
                <div class="client-info">
                    <h4>@client.DisplayName</h4>
                    <p><strong>ID:</strong> @client.ClientId</p>
                    <p><strong>V√§rit:</strong> 
                        <span style="background: @client.Settings.UI.PrimaryColor; color: white; padding: 2px 8px; border-radius: 3px;">
                            @client.Settings.UI.PrimaryColor
                        </span>
                    </p>
                </div>
                
                <div class="client-settings">
                    <h5>Viestit:</h5>
                    <p>üåÖ @client.Settings.Messages.MorningGreeting</p>
                    <p>üåô @client.Settings.Messages.EveningGreeting</p>
                    
                    <h5>Ruoka-asetukset:</h5>
                    <p>üìù @client.Settings.Nutrition.DefaultMealReminder</p>
                    
                    @if (client.Settings.Nutrition.PreferredMeals.Any())
                    {
                        <p><strong>Lempiruuat:</strong></p>
                        <ul>
                            @foreach (var meal in client.Settings.Nutrition.PreferredMeals.Take(2))
                            {
                                <li>@meal.Name (@meal.TimeOfDay)</li>
                            }
                        </ul>
                    }
                    
                    <h5>UI-asetukset:</h5>
                    <p>üì± Fonttikoko: @client.Settings.UI.FontSize</p>
                    <p>üîä √Ñ√§nih√§lytykset: @(client.Settings.UI.EnableVoiceAlerts ? "Kyll√§" : "Ei")</p>
                </div>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(selectedClientId))
    {
        <div class="test-actions">
            <h3>Testaa asiakasta: @selectedClient?.DisplayName</h3>
            <button class="btn btn-primary" @onclick="TestClientApp">
                üöÄ Avaa sovellus t√§lle asiakkaalle
            </button>
            <button class="btn btn-secondary" @onclick="ShowClientJson">
                üìã N√§yt√§ JSON-konfiguraatio
            </button>
        </div>
    }
    
    @if (showJson && selectedClient != null)
    {
        <div class="json-display">
            <h4>JSON-konfiguraatio asiakkaalle @selectedClient.DisplayName:</h4>
            <pre>@System.Text.Json.JsonSerializer.Serialize(selectedClient, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
        </div>
    }
    
    <div class="add-client-section">
        <h3>‚ûï Lis√§√§ uusi asiakas</h3>
        <p>Tulevaisuudessa t√§h√§n tulee lomake uuden asiakkaan lis√§√§miseen:</p>
        <ul>
            <li>Asiakkaan nimi ja ID</li>
            <li>Personoidut viestit</li>
            <li>Ruokavalio ja rajoitukset</li>
            <li>L√§√§kitykset ja aikataulut</li>
            <li>UI-asetukset (v√§rit, fonttikoko)</li>
            <li>Yhteystiedot</li>
        </ul>
    </div>
</div>

<style>
    .client-test-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .client-selector {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
        margin: 20px 0;
    }
    
    .client-card {
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: #f9f9f9;
    }
    
    .client-card:hover {
        border-color: #007bff;
        box-shadow: 0 4px 8px rgba(0,123,255,0.2);
    }
    
    .client-card.selected {
        border-color: #007bff;
        background: #e7f3ff;
    }
    
    .client-info h4 {
        margin: 0 0 10px 0;
        color: #333;
    }
    
    .client-settings {
        margin-top: 15px;
        font-size: 14px;
    }
    
    .client-settings h5 {
        margin: 10px 0 5px 0;
        color: #666;
        font-size: 16px;
    }
    
    .client-settings ul {
        margin: 5px 0;
        padding-left: 20px;
    }
    
    .test-actions {
        margin: 30px 0;
        padding: 20px;
        background: #f0f8ff;
        border-radius: 8px;
    }
    
    .test-actions .btn {
        margin-right: 10px;
        margin-bottom: 10px;
    }
    
    .json-display {
        margin: 20px 0;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }
    
    .json-display pre {
        background: #fff;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #ddd;
        font-size: 12px;
        overflow-x: auto;
        max-height: 400px;
        overflow-y: auto;
    }
    
    .add-client-section {
        margin-top: 40px;
        padding: 20px;
        background: #f0f0f0;
        border-radius: 8px;
    }
    
    .add-client-section ul {
        margin: 10px 0;
        padding-left: 20px;
    }
</style>

@code {
    private List<ClientConfig> availableClients = new();
    private string selectedClientId = "";
    private ClientConfig? selectedClient;
    private bool showJson = false;

    protected override void OnInitialized()
    {
        availableClients = ClientConfigService.GetAllClients();
    }

    private void SelectClient(string clientId)
    {
        selectedClientId = clientId;
        selectedClient = ClientConfigService.GetClientConfig(clientId);
        showJson = false;
        StateHasChanged();
    }

    private void TestClientApp()
    {
        if (!string.IsNullOrEmpty(selectedClientId))
        {
            // Navigoi p√§√§sovellukseen client parametrilla
            Navigation.NavigateTo($"/?client={selectedClientId}");
        }
    }

    private void ShowClientJson()
    {
        showJson = !showJson;
        StateHasChanged();
    }
}