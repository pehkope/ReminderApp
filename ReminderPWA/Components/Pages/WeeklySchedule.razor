@page "/weeklyschedule"
@using ReminderTabletNew2.Models
@using ReminderTabletNew2.Services
@inject NavigationManager Navigation
@inject ApiService ApiService
@using ReminderTabletNew2.Components

<SwipeContainer OnSwipe="HandleSwipe" CssClass="weekly-schedule-swipe">
<div class="weekly-schedule">
    <div class="header">
        <h2>üìÖ VIIKKO-OHJELMA</h2>
        <button class="back-button" @onclick="GoBack">‚Üê Takaisin</button>
    </div>
    
    <div class="schedule-grid">
        @if (apiResponse?.WeeklyPlan?.Days?.Any() == true)
        {
            <div class="grid-header">
                @foreach (var d in apiResponse.WeeklyPlan.Days)
                {
                    <div class="grid-col header-col">@d.Label</div>
                }
            </div>
            <div class="grid-row section-row">
                @foreach (var d in apiResponse.WeeklyPlan.Days)
                {
                    <div class="grid-col">
                        <div class="section-title">üçΩÔ∏è Ruoka</div>
                        @foreach (var item in d.Meals)
                        {
                            <div class="entry food-task">@item</div>
                        }
                        @if (d.Meals == null || d.Meals.Count == 0)
                        {
                            <div class="entry empty">‚Äî</div>
                        }
                    </div>
                }
            </div>
            <div class="grid-row section-row">
                @foreach (var d in apiResponse.WeeklyPlan.Days)
                {
                    <div class="grid-col">
                        <div class="section-title">üíä L√§√§kkeet</div>
                        @foreach (var item in d.Medicines)
                        {
                            <div class="entry medicine-task">@item</div>
                        }
                        @if (d.Medicines == null || d.Medicines.Count == 0)
                        {
                            <div class="entry empty">‚Äî</div>
                        }
                    </div>
                }
            </div>
            <div class="grid-row section-row">
                @foreach (var d in apiResponse.WeeklyPlan.Days)
                {
                    <div class="grid-col">
                        <div class="section-title">üìÖ Tapahtumat</div>
                        @foreach (var item in d.Events)
                        {
                            <div class="entry general-task">@item</div>
                        }
                        @if (d.Events == null || d.Events.Count == 0)
                        {
                            <div class="entry empty">‚Äî</div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-tasks">Ei tietoja t√§lle viikolle</div>
        }
    </div>
</div>
</SwipeContainer>

@code {
    private ReminderApiResponse? apiResponse;
    private List<WeekDayColumn> weekDays = new();

    protected override async Task OnInitializedAsync() => await LoadData();

    private async Task LoadData()
    {
        var result = await ApiService.GetDataAsync("mom", maxRetries: 1);
        if (result.IsSuccess)
        {
            apiResponse = result.Data;
            BuildWeek();
        }
        else
        {
            Console.WriteLine($"WeeklySchedule API error: {result.ErrorCode} {result.ErrorMessage}");
            AddTestData();
            BuildWeek();
        }
        if (apiResponse == null || apiResponse.DailyTasks?.Any() != true)
        {
            AddTestData();
            BuildWeek();
        }
    }

    private void AddTestData()
    {
        if (apiResponse == null)
        {
            apiResponse = new ReminderApiResponse();
        }

        apiResponse.DailyTasks = new List<DailyTask>
        {
            new DailyTask { Date = "T√§n√§√§n", Time = "08:30", Type = "AAMUPALA", Message = "Kumpaakin 1 kpl", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "09:00", Type = "L√Ñ√ÑKKEET", Message = "Muista ottaa aamun l√§√§ke", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "12:00", Type = "LOUNAS", Message = "Ainakin kunnon v√§lipala", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "12:30", Type = "L√Ñ√ÑKKEET", Message = "Vitamiini D 1 kapseli", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "13:30", Type = "PUUHAA", Message = "K√§velylenkki l√§hell√§ tai kaupungilla", RequiresAck = false },
            new DailyTask { Date = "T√§n√§√§n", Time = "15:00", Type = "ASIAT", Message = "K√§y kaupassa ja osta mit√§ puuttuu", RequiresAck = false },
            new DailyTask { Date = "T√§n√§√§n", Time = "17:30", Type = "P√ÑIV√ÑLLINEN", Message = "L√§mmin ruoka", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "18:00", Type = "L√Ñ√ÑKKEET", Message = "Magnesium 2 tablettia", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "19:00", Type = "PUUHAA", Message = "Pieni iltak√§vely jos s√§√§ sallii", RequiresAck = false },
            new DailyTask { Date = "T√§n√§√§n", Time = "20:30", Type = "PUUHAA", Message = "Miten olisi aivojumppa yhdess√§?", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "22:00", Type = "ILTAPALA", Message = "Esim. rahkaa tai jugurttia", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "22:30", Type = "L√Ñ√ÑKKEET", Message = "Muista ottaa illan l√§√§ke", RequiresAck = true }
        };

        apiResponse.ImportantMessage = "13.20 Hammasl√§√§k√§ri Lauttasaaren terveysasemalla";
    }

    private IEnumerable<DailyTask> GetMealsToday() =>
        apiResponse?.DailyTasks?.Where(t => (t.Type?.ToUpperInvariant().Contains("RUOKA") == true) ||
                                             (t.Type?.ToUpperInvariant().Contains("AAMU") == true) ||
                                             (t.Type?.ToUpperInvariant().Contains("LOUNAS") == true) ||
                                             (t.Type?.ToUpperInvariant().Contains("P√ÑIV√ÑLLINEN") == true) ||
                                             (t.Type?.ToUpperInvariant().Contains("ILTAPALA") == true))
        ?? Enumerable.Empty<DailyTask>();

    private IEnumerable<DailyTask> GetMedicinesToday() =>
        apiResponse?.DailyTasks?.Where(t => (t.Type?.ToUpperInvariant().Contains("L√Ñ√ÑKKEET") == true))
        ?? Enumerable.Empty<DailyTask>();

    private bool IsTaskForTimeOfDay(DailyTask task, string timeOfDay)
    {
        if (DateTime.TryParse(task.Time, out var taskTime))
        {
            var hour = taskTime.Hour;
            return timeOfDay switch
            {
                "AAMU" => hour >= 6 && hour < 11,
                "P√ÑIV√Ñ" => hour >= 11 && hour < 16,
                "ILTA" => hour >= 16 && hour < 21,
                "Y√ñ" => hour >= 21 || hour < 6,
                _ => false
            };
        }

        // Fallback: match by task type
        return timeOfDay switch
        {
            "AAMU" => task.Type.Contains("AAMUPALA") || task.Type.Contains("L√Ñ√ÑKKEET") && task.Time.Contains("0"),
            "P√ÑIV√Ñ" => task.Type.Contains("LOUNAS") || task.Type.Contains("PUUHAA") || task.Type.Contains("ASIAT"),
            "ILTA" => task.Type.Contains("P√ÑIV√ÑLLINEN") || task.Type.Contains("PUUHAA"),
            "Y√ñ" => task.Type.Contains("ILTAPALA") || task.Type.Contains("L√Ñ√ÑKKEET") && task.Time.Contains("2"),
            _ => false
        };
    }

    private string GetTaskIcon(string taskType)
    {
        return taskType.ToUpper() switch
        {
            var type when type.Contains("AAMUPALA") => "‚òï",
            var type when type.Contains("LOUNAS") => "üçΩÔ∏è",
            var type when type.Contains("P√ÑIV√ÑLLINEN") => "üçΩÔ∏è",
            var type when type.Contains("ILTAPALA") => "üçΩÔ∏è",
            var type when type.Contains("L√Ñ√ÑKKEET") => "üíä",
            var type when type.Contains("PUUHAA") => "‚òÄÔ∏è",
            var type when type.Contains("ASIAT") => "üìã",
            _ => "üìù"
        };
    }

    private string GetTaskCssClass(string taskType)
    {
        return taskType.ToUpper() switch
        {
            var type when type.Contains("AAMUPALA") || type.Contains("LOUNAS") || type.Contains("P√ÑIV√ÑLLINEN") || type.Contains("ILTAPALA") => "food-task",
            var type when type.Contains("L√Ñ√ÑKKEET") => "medicine-task",
            var type when type.Contains("PUUHAA") => "activity-task",
            var type when type.Contains("ASIAT") => "general-task",
            _ => "general-task"
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void HandleSwipe(string direction)
    {
        if (direction == "left")
        {
            GoBack();
        }
    }

    // Rakenna yksinkertainen viikon ruudukko (t√§n√§√§n + 6 seuraavaa p√§iv√§√§)
    private void BuildWeek()
    {
        weekDays.Clear();
        var today = DateTime.Today;
        for (int i = 0; i < 7; i++)
        {
            var d = today.AddDays(i);
            var label = d.ToString("ddd dd.MM");

            var meals = GetMealsToday()
                .Select(t => (t.Description ?? t.Message) ?? "")
                .ToList();
            var meds = GetMedicinesToday()
                .Select(t => (t.Description ?? t.Message) ?? "")
                .ToList();
            var eventsList = (apiResponse?.UpcomingAppointments ?? new List<UpcomingAppointment>())
                .Where(a => DateTime.TryParse(a.Date, out var ad) && ad.Date == d.Date)
                .Select(a => $"{a.Time} {a.Type}: {a.Message}")
                .ToList();

            weekDays.Add(new WeekDayColumn
            {
                Date = d,
                Label = label,
                Meals = meals,
                Medicines = meds,
                Events = eventsList
            });
        }
    }

    private class WeekDayColumn
    {
        public DateTime Date { get; set; }
        public string Label { get; set; } = "";
        public List<string> Meals { get; set; } = new();
        public List<string> Medicines { get; set; } = new();
        public List<string> Events { get; set; } = new();
    }
} 