@using ReminderTabletNew2.Services
@using ReminderTabletNew2.Models

<div class="main-photo">
    @if (!string.IsNullOrEmpty(ImageUrl))
    {
        <img src="@ImageUrl" alt="@Caption" title="@Caption" 
             @key="ImageUrl"
             @onload="@(() => LoggingService.LogImageLoad(ImageUrl, true))"
             @onerror="@(() => LoggingService.LogImageLoad(ImageUrl, false))" />

        @if (!string.IsNullOrWhiteSpace(Caption))
        {
            <div class="photo-caption-overlay">@Caption</div>
        }
    }
    else
    {
        <div class="no-photo">‚ùå Ei kuva-URL:a saatavilla </div>
    }
</div>

@code {
    [Parameter] public string? ApiPhotoUrl { get; set; }
    [Parameter] public string? ApiPhotoCaption { get; set; }
    [Parameter] public EventCallback<PhotoClickArgs> OnPhotoClick { get; set; }
    [Parameter] public string? FallbackUrl { get; set; }

    public class PhotoClickArgs
    {
        public string ImageUrl { get; set; } = "";
        public string Caption { get; set; } = "";
    }

    private string ImageUrl => GetImageUrl();
    private string Caption => GetImageCaption();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine($"üñºÔ∏è DailyPhoto initialized - ApiPhotoUrl: '{ApiPhotoUrl}', ApiPhotoCaption: '{ApiPhotoCaption}'");
            Console.WriteLine($"üñºÔ∏è DailyPhoto effective URL: '{ImageUrl}', Caption: '{Caption}'");
        }
    }

    private string? _lastApiPhotoUrl;
    private string? _effectiveUrl;

    protected override void OnParametersSet()
    {
        if (!string.Equals(_lastApiPhotoUrl, ApiPhotoUrl, StringComparison.Ordinal))
        {
            _lastApiPhotoUrl = ApiPhotoUrl;
            var sanitized = SanitizeUrl(ApiPhotoUrl) ?? ApiPhotoUrl; // s√§ilyt√§ aiempi k√§yt√∂s, jos sanitointi ei pysty varmistamaan
            var cacheBustered = AddCacheBuster(sanitized);
            _effectiveUrl = cacheBustered;

            Console.WriteLine($"üñºÔ∏è DailyPhoto parameters changed - Original: '{ApiPhotoUrl}' -> Sanitized: '{sanitized}' -> Final: '{cacheBustered}'");
        }
    }

    private string GetImageUrl()
    {
        Console.WriteLine($"üñºÔ∏è GetImageUrl called - ApiPhotoUrl: '{ApiPhotoUrl}', FallbackUrl: '{FallbackUrl}'");
        
        // Ensisijaisesti API:sta (vain kelvollinen absoluuttinen URL)
        if (!string.IsNullOrEmpty(ApiPhotoUrl))
        {
            Console.WriteLine($"üñºÔ∏è Using API photo URL: '{ApiPhotoUrl}'");
            if (!string.IsNullOrEmpty(_effectiveUrl)) return _effectiveUrl;
        }
        // Fallback from parent (e.g., profile or weekly photo)
        if (!string.IsNullOrEmpty(FallbackUrl))
        {
            Console.WriteLine($"üñºÔ∏è Using fallback URL: '{FallbackUrl}'");
            return AddCacheBuster(FallbackUrl);
        }
        
        // Toissijaisesti frontend:n viikottainen simulaatio (backend ei ole viel√§ k√§yt√∂ss√§)
        var simulatedUrl = TestDataService.GetDefaultPhotoUrl();
        Console.WriteLine($"üñºÔ∏è Using simulated URL (fallback): '{simulatedUrl}'");
        return simulatedUrl;
    }

    private string GetImageCaption()
    {
        if (!string.IsNullOrEmpty(ApiPhotoCaption))
            return ApiPhotoCaption;
            
        return TestDataService.GetDefaultPhotoCaption();
    }

    private static string AddCacheBuster(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return "";
        // √Ñl√§ lis√§√§ cache-busteria Telegram file -URLeihin (404 riski, ei hyv√§ksy ylim√§√§r√§isi√§ queryj√§)
        try
        {
            if (Uri.TryCreate(url, UriKind.Absolute, out var u))
            {
                if (u.Host.Equals("api.telegram.org", StringComparison.OrdinalIgnoreCase))
                {
                    return url;
                }
            }
        }
        catch {}
        // Pakota https, jos linkki on vahingossa http
        if (url.StartsWith("http://", StringComparison.OrdinalIgnoreCase))
        {
            url = "https://" + url.Substring("http://".Length);
        }
        // Jos urlissa on jo v= tai _cb=, √§l√§ lis√§√§ uutta
        if (url.Contains("v=", StringComparison.OrdinalIgnoreCase) || url.Contains("_cb=", StringComparison.OrdinalIgnoreCase))
            return url;

        // Lis√§√§ cache-buster tunnetuille kuvadomaineille tai jos ei ole query√§ ollenkaan
        var needsBuster = url.Contains("drive.google.com", StringComparison.OrdinalIgnoreCase)
                       || url.Contains("googleusercontent.com", StringComparison.OrdinalIgnoreCase)
                       || url.Contains("photos.google.com", StringComparison.OrdinalIgnoreCase)
                       || url.Contains("photos.app.goo.gl", StringComparison.OrdinalIgnoreCase)
                       || !url.Contains('?', StringComparison.Ordinal);

        if (!needsBuster) return url;

        var sep = url.Contains('?') ? '&' : '?';
        var ts = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
        return $"{url}{sep}_cb={ts}";
    }

    private static string? SanitizeUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url)) return null;
        url = url.Trim().Trim('\"', '\'');
        if (url.StartsWith("//")) return "https:" + url;
        if (url.StartsWith("http://", StringComparison.OrdinalIgnoreCase) || url.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
            return url;
        // Yleiset domainit ilman skeemaa ‚Äì lis√§√§ https
        var domains = new[] { "drive.google.com", "googleusercontent.com", "photos.google.com", "photos.app.goo.gl", "api.telegram.org" };
        foreach (var d in domains)
        {
            if (url.StartsWith(d, StringComparison.OrdinalIgnoreCase))
                return "https://" + url;
        }
        // Muut tapaukset (esim. "file_1.jpg") ‚Äì ei kelvollinen absoluuttinen kuva-URL
        return null;
    }
}