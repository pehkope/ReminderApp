@using ReminderTabletNew2.Services
@using ReminderTabletNew2.Models

<div class="main-photo photo-clickable" @onclick="() => OnPhotoClick.InvokeAsync(new PhotoClickArgs { ImageUrl = ImageUrl, Caption = Caption })">
    @if (!string.IsNullOrEmpty(ImageUrl))
    {
        <img src="@ImageUrl" alt="@Caption" title="@Caption" style="width: 100%; height: 100%; object-fit: cover;" 
             @onload="@(() => LoggingService.LogImageLoad(ImageUrl, true))"
             @onerror="@(() => LoggingService.LogImageLoad(ImageUrl, false))" />
    }
    else
    {
        <div class="no-photo">❌ Ei kuva-URL:a saatavilla </div>
    }
</div>

@if (!string.IsNullOrWhiteSpace(Caption))
{
    <div class="photo-caption">@Caption</div>
}

@code {
    [Parameter] public string? ApiPhotoUrl { get; set; }
    [Parameter] public string? ApiPhotoCaption { get; set; }
    [Parameter] public EventCallback<PhotoClickArgs> OnPhotoClick { get; set; }

    public class PhotoClickArgs
    {
        public string ImageUrl { get; set; } = "";
        public string Caption { get; set; } = "";
    }

    private string ImageUrl => GetImageUrl();
    private string Caption => GetImageCaption();

    private string GetImageUrl()
    {
        // Ensisijaisesti API:sta
        if (!string.IsNullOrEmpty(ApiPhotoUrl))
        {
            return ApiPhotoUrl;
        }
        
        // Toissijaisesti frontend:n viikottainen simulaatio (backend ei ole vielä käytössä)
        var simulatedUrl = TestDataService.GetDefaultPhotoUrl();
        return simulatedUrl;
    }

    private string GetImageCaption()
    {
        if (!string.IsNullOrEmpty(ApiPhotoCaption))
            return ApiPhotoCaption;
            
        return TestDataService.GetDefaultPhotoCaption();
    }
}