@using ReminderTabletNew2.Models

<div class="tasks-section">
    <h2>SEURAAVAKSI (@TimeOfDayText.ToUpper())</h2>
    
    @if (Tasks?.Any() == true)
    {
        @foreach (var task in Tasks)
        {
            <div class="task-item @GetTaskCssClass(task.Type) @(task.IsAckedToday ? "completed" : "")">
                <div class="task-details">
                    <i class="task-icon @GetTaskIconClass(task.Type)"></i>
                    <span class="task-text">@task.Type.ToUpper(): @(task.Description ?? task.Message)</span>
                    @if (IsFoodTask(task) && MealOptions != null && MealOptions.Any())
                    {
                        <div style="margin-left:12px; font-size:.95rem; opacity:.9; display:flex; align-items:center; gap:8px;">
                            <span>@(selectedMealOption ?? MealOptions.First())</span>
                            <button class="icon-button" title="Vaihda vaihtoehto" @onclick="ToggleMealList">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                    }
                </div>
                @if (ShouldShowOkButton(task))
                {
                    <button class="ok-button" @onclick="() => OnTaskAcknowledge.InvokeAsync(task)">OK</button>
                }
                else if (task.RequiresAck && task.IsAckedToday)
                {
                    <span class="acked-badge">✅ KUITATTU</span>
                }
            </div>
            @if (IsFoodTask(task) && showMealList && MealOptions != null && MealOptions.Any())
            {
                <div style="margin:6px 0 0 28px; display:flex; gap:8px; flex-wrap:wrap;">
                    @foreach (var opt in MealOptions)
                    {
                        <button class="ok-button" style="padding:6px 10px; background:#eef; color:#333; border-radius:10px; border:1px solid #ccd; font-weight:600;"
                                @onclick="() => SelectMealOption(opt)">@opt</button>
                    }
                </div>
            }
        }
    }
</div>

@code {
    [Parameter] public IEnumerable<DailyTask>? Tasks { get; set; }
    [Parameter] public string TimeOfDayText { get; set; } = "AAMU";
    [Parameter] public EventCallback<DailyTask> OnTaskAcknowledge { get; set; }
    [Parameter] public string? NextMealType { get; set; }
    [Parameter] public string? NextMealTime { get; set; }
    [Parameter] public IEnumerable<string>? MealOptions { get; set; }

    private bool showMealList = false;
    private string? selectedMealOption;

    private bool ShouldShowOkButton(DailyTask task)
    {
        // ✅ Käytetään RequiresAck kenttää API:sta
        return task.RequiresAck && !task.IsAckedToday;
    }

    private bool IsFoodTask(DailyTask task)
    {
        return task.Type.Equals("RUOKA", StringComparison.OrdinalIgnoreCase);
    }

    private void ToggleMealList()
    {
        showMealList = !showMealList;
    }

    protected override void OnParametersSet()
    {
        if (selectedMealOption == null && MealOptions != null && MealOptions.Any())
        {
            selectedMealOption = MealOptions.First();
        }
    }

    private void SelectMealOption(string opt)
    {
        selectedMealOption = opt;
        showMealList = false;
        StateHasChanged();
    }

    private string GetTaskIconClass(string taskType)
    {
        return taskType.ToUpper() switch
        {
            "RUOKA" => "fas fa-utensils",
            "LÄÄKKEET" => "fas fa-pills",
            "PUUHAA" => "fas fa-sun",
            _ when taskType.ToUpper().Contains("ASIAT") => "fas fa-clipboard-list",
            _ => "fas fa-tasks"
        };
    }

    private string GetTaskCssClass(string taskType)
    {
        var type = taskType.ToUpper();
        
        if (type.Contains("RUOKA")) return "food-task";
        if (type.Contains("LÄÄKKEET")) return "medicine-task";
        if (type.Contains("PUUHAA")) return "activity-task";
        if (type.Contains("ASIAT")) return "general-task";
        
        return "general-task";
    }
} 