@using ReminderTabletNew2.Models
@using ReminderTabletNew2.Services
@implements IDisposable

<div class="mobile-container @GetViewCssClass()">
    <!-- Header Section -->
    <div class="header-section">
        <div class="time-container">
            <div class="date-text">@CurrentTime.ToString("dddd d. MMMM yyyy", new System.Globalization.CultureInfo("fi-FI"))</div>
            
            <div class="time-main">
                <div class="main-time">@CurrentTime.ToString("HH:mm")</div>
                <div class="time-period">@GetTimeOfDayText()</div>
            </div>
            
            @* S√§√§tieto kellonaika-alueen sis√§ll√§ alaosassa *@
            <div class="weather-compact">
                @if (ApiResponse?.Weather != null)
                {
                    <span class="weather-icon">@GetWeatherIcon(ApiResponse.Weather.Description)</span>
                    <div class="weather-info">
                        <span class="weather-temp">@ApiResponse.Weather.Temperature</span>
                        <span class="weather-desc">@ApiResponse.Weather.Description</span>
                    </div>
                }
                else
                {
                    <span class="weather-icon">üå§Ô∏è</span>
                    <div class="weather-info">
                        <span class="weather-temp">22¬∞C</span>
                        <span class="weather-desc">Pilvinen</span>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Content Area -->
    <div class="content-area">
        @* P√§iv√§n viesti ReminderAppista (kl 8, 12, 16, 21) *@
        <div class="notification-wrapper">
            <div class="bell-icon @(IsNewMessage ? "animated-bell" : "")">
                <i class="fas fa-bell"></i>
            </div>
            <div class="notification-bubble">
                <div class="notification-title">@GetMessageTimestamp()</div>
                <p>@GetContextualMessage()</p>
            </div>
        </div>

        @* Teht√§v√§kent√§t erillisess√§ komponentissa *@
        <TaskField 
            Tasks="GetFilteredTasks()" 
            TimeOfDayText="@GetTimeOfDayText()" 
            DefaultActivityText="@GetActivitySuggestion()"
            OnTaskAcknowledge="HandleTaskAcknowledge" />

    </div>

    @* Kuva l√§hell√§ asiat-kentt√§√§ ja footer *@
    <div class="photo-container">
        @* T√§rke√§ viesti valokuvan p√§√§ll√§ (jos t√§rkeiss√§ tapaamisissa on tapaaminen t√§n√§√§n) *@
        @if (!string.IsNullOrWhiteSpace(ApiResponse?.ImportantMessage))
        {
            <div class="important-banner">
                ‚ö†Ô∏è T√ÑN√Ñ√ÑN T√ÑRKE√Ñ√Ñ: @ApiResponse.ImportantMessage
            </div>
        }
        
        @{
            string imageUrl = GetImageUrl();
        }
        
                 @if (!string.IsNullOrEmpty(imageUrl))
         {
             <div class="main-photo photo-clickable" @onclick="() => OpenImageModal(imageUrl, GetImageCaption())">
                                   <img src="@imageUrl" alt="@GetImageCaption()" style="width: 100%; height: 100%; object-fit: cover;" 
                       @onload="@(() => LoggingService.LogImageLoad(imageUrl, true))"
                       @onerror="@(() => LoggingService.LogImageLoad(imageUrl, false))" />
                 <div class="photo-overlay">
                     <span class="zoom-icon">üîç</span>
                     <span>Suurenna</span>
                 </div>
             </div>
                                         <div style="background: yellow; padding: 5px; font-size: 0.8rem;">
                  DEBUG: Viikko @TestDataService.GetCurrentWeekNumber() - @imageUrl
              </div>
         }
         else
         {
             <div class="main-photo">
                 <div class="no-photo">‚ùå Ei kuva-URL:a saatavilla</div>
             </div>
         }
        
        @* Footer toiminnot *@
        <div class="footer-bar">
            <div class="footer-action" @onclick="() => OnNavigateToWeekly.InvokeAsync()">
                <div class="action-icon-wrapper calendar">
                    <i class="fas fa-calendar-alt"></i>
                </div>
                <span>P√§iv√§n ohjelma</span>
            </div>
            <div class="footer-action" @onclick="() => OnNavigateToContacts.InvokeAsync()">
                <div class="action-icon-wrapper phone">
                    <i class="fas fa-phone"></i>
                </div>
                <span>Soita perhe</span>
            </div>
            <div class="footer-action" @onclick="() => OnStartExercise.InvokeAsync()">
                <div class="action-icon-wrapper brain">
                    <i class="fas fa-running"></i>
                </div>
                <span>Aloita jumppa</span>
            </div>
        </div>
    </div>
</div>

<ImageModal IsVisible="@showImageModal" 
            ImageSrc="@modalImageSrc" 
            ImageAlt="@modalImageAlt"
            ImageTitle="P√§iv√§n kuvamuisto"
            ImageCaption="@modalImageCaption"
            OnClose="CloseImageModal" />

@code {
    [Parameter] public required ViewMode TimeOfDay { get; set; }
    [Parameter] public required DateTime CurrentTime { get; set; }
    [Parameter] public ReminderApiResponse? ApiResponse { get; set; }
    [Parameter] public EventCallback<TaskAckRequest> OnAcknowledgeTask { get; set; }
    [Parameter] public EventCallback OnNavigateToWeekly { get; set; }
    [Parameter] public EventCallback OnNavigateToContacts { get; set; }
    [Parameter] public EventCallback OnStartExercise { get; set; }
    [Parameter] public bool IsNewMessage { get; set; } = false;

    public enum ViewMode
    {
        Morning,     // 08:00-11:00
        Day,         // 11:00-16:00
        Evening,     // 16:00-21:00
        Night        // 21:00+
    }

    public class TaskAckRequest
    {
        public string TaskType { get; set; } = "";
        public string TimeOfDay { get; set; } = "";
    }

    private string GetViewCssClass()
    {
        return TimeOfDay switch
        {
            ViewMode.Morning => "morning-view",
            ViewMode.Day => "day-view", 
            ViewMode.Evening => "evening-view",
            ViewMode.Night => "night-view",
            _ => "morning-view"
        };
    }

    private string GetTimeOfDayText()
    {
        return TimeOfDay switch
        {
            ViewMode.Morning => "AAMU",
            ViewMode.Day => "P√ÑIV√Ñ",
            ViewMode.Evening => "ILTA", 
            ViewMode.Night => "Y√ñ",
            _ => "AAMU"
        };
    }

    private string GetMessageTimestamp()
    {
        return TimeOfDay switch
        {
            ViewMode.Morning => "Viesti saapui 08:00",
            ViewMode.Day => "Viesti saapui 12:00", 
            ViewMode.Evening => "Viesti saapui 16:00",
            ViewMode.Night => "Viesti saapui 21:00",
            _ => "Viesti saapui juuri"
        };
    }

    private string GetContextualMessage()
    {
        if (!string.IsNullOrEmpty(ApiResponse?.LatestReminder))
            return ApiResponse.LatestReminder;

        return TimeOfDay switch
        {
            ViewMode.Morning => "Aamun tuoksu tervehtii sinua. Kaunis p√§iv√§ on edess√§! ‚òÄÔ∏è",
            ViewMode.Day => "P√§iv√§ etenee mukavasti. Toivottavasti voit hyvin! üå§Ô∏è",
            ViewMode.Evening => "Ilta laskeutuu rauhallisesti. Aikaa rentoutua. üåÖ",
            ViewMode.Night => "P√§iv√§ on p√§√§ttym√§ss√§. Lep√§√§ hyvin! üåô",
            _ => "Kaunis hetki juuri nyt."
        };
    }

    private string GetActivitySuggestion()
    {
        var weather = ApiResponse?.Weather?.Description ?? "";
        
        return TimeOfDay switch
        {
            ViewMode.Morning => $"Aamun lehden lukemista tai pieni ulkoilukierros. {weather}",
            ViewMode.Day => $"Ihanaa p√§iv√§saikaa - ehk√§ ulkoilua tai k√§sit√∂it√§? {weather}",
            ViewMode.Evening => $"Aivojumppa yhdess√§ tai rauhallista television katselua.",
            ViewMode.Night => $"Rentoutumista ja hyv√§n y√∂n valmistelua.",
            _ => $"Nauti t√§st√§ hetkest√§! {weather}"
        };
    }

    private IEnumerable<DailyTask> GetFilteredTasks()
    {
        if (ApiResponse?.DailyTasks == null) return [];
        
        // Filter tasks based on time of day
        return ApiResponse.DailyTasks.Where(task => IsTaskRelevantForTime(task));
    }

    // Image modal state
    private bool showImageModal = false;
    private string modalImageSrc = "";
    private string modalImageAlt = "";
    private string modalImageCaption = "";

    private void OpenImageModal(string imageSrc, string caption)
    {
        modalImageSrc = imageSrc;
        modalImageAlt = caption;
        modalImageCaption = caption;
        showImageModal = true;
        StateHasChanged();
    }

    private void CloseImageModal()
    {
        showImageModal = false;
        StateHasChanged();
    }

    private bool IsTaskRelevantForTime(DailyTask task)
    {
        var taskType = task.Type.ToUpper();
        
        return TimeOfDay switch
        {
            ViewMode.Morning => taskType.Contains("RUOKA") || taskType.Contains("L√Ñ√ÑKKEET") || taskType.Contains("AAMU"),
            ViewMode.Day => taskType.Contains("LOUNAS") || taskType.Contains("P√ÑIV√Ñ") || taskType.Contains("RUOKA") || taskType.Contains("L√Ñ√ÑKKEET") || taskType.Contains("ASIAT") || (!taskType.Contains("ILTA") && !taskType.Contains("Y√ñ")),
            ViewMode.Evening => taskType.Contains("RUOKA") || taskType.Contains("L√Ñ√ÑKKEET") || taskType.Contains("LIIKUNTA") || taskType.Contains("ILTA") || taskType.Contains("P√ÑIV√ÑLLINEN"),
            ViewMode.Night => taskType.Contains("ILTAPALA") || taskType.Contains("L√Ñ√ÑKKEET") || taskType.Contains("Y√ñ"),
            _ => true
        };
    }
    
    private async Task HandleTaskAcknowledge(DailyTask task)
    {
        await OnAcknowledgeTask.InvokeAsync(new TaskAckRequest { TaskType = task.Type, TimeOfDay = GetTimeOfDayText() });
    }

    private string GetWeatherIcon(string? description)
    {
        if (string.IsNullOrEmpty(description)) return "üå§Ô∏è";
        
        var desc = description.ToLower();
        if (desc.Contains("aurinko") || desc.Contains("kirkas") || desc.Contains("selke√§")) return "‚òÄÔ∏è";
        if (desc.Contains("pilvi") || desc.Contains("pilvinen")) return "‚òÅÔ∏è";
        if (desc.Contains("sade") || desc.Contains("sateinen")) return "üåßÔ∏è";
        if (desc.Contains("lumi") || desc.Contains("luminen")) return "‚ùÑÔ∏è";
        if (desc.Contains("usva") || desc.Contains("sumu")) return "üå´Ô∏è";
        if (desc.Contains("myrsky") || desc.Contains("ukkonen")) return "‚õàÔ∏è";
        if (desc.Contains("tuuli") || desc.Contains("tuulinen")) return "üí®";
        
        return "üå§Ô∏è";
    }

    private string GetImageUrl()
    {
         // Ensisijaisesti API:sta
         if (!string.IsNullOrEmpty(ApiResponse?.DailyPhotoUrl))
         {
             return ApiResponse.DailyPhotoUrl;
         }
         
         // Toissijaisesti frontend:n viikottainen simulaatio (backend ei ole viel√§ k√§yt√∂ss√§)
         var simulatedUrl = TestDataService.GetDefaultPhotoUrl();
         return simulatedUrl;
    }

    private string GetImageCaption()
    {
        if (!string.IsNullOrEmpty(ApiResponse?.DailyPhotoCaption))
            return ApiResponse.DailyPhotoCaption;
            
        return TestDataService.GetDefaultPhotoCaption();
    }

    // PARAS K√ÑYT√ÑNT√ñ: IDisposable pattern
    public void Dispose()
    {
        // Tulevaisuudessa: unsubscribe events, cancel timers, dispose resources
        // Esim: timer?.Dispose();
    }
} 