@page "/weeklyschedule"
@inject HttpClient Http
@using ReminderTabletNew2.Models
@using System.Text.Json
@inject NavigationManager Navigation
@using ReminderTabletNew2.Components

<SwipeContainer OnSwipe="HandleSwipe" CssClass="daily-schedule-swipe">
<div class="daily-schedule">
    <div class="header">
        <h2>üìÖ T√ÑN√Ñ√ÑN - P√ÑIV√ÑN OHJELMA</h2>
        <button class="back-button" @onclick="GoBack">‚Üê Takaisin</button>
    </div>
    
    <div class="schedule-content">
        @if (apiResponse?.DailyTasks?.Any() == true)
        {
            @* AAMU *@
            <div class="time-section">
                <h3 class="time-title">üåÖ AAMU (08:00-11:00)</h3>
                @foreach (var task in GetTasksForTimeOfDay("AAMU"))
                {
                    <div class="task-item @GetTaskCssClass(task.Type)">
                        <div class="task-icon">@GetTaskIcon(task.Type)</div>
                        <div class="task-details">
                            <div class="task-text">@task.Message</div>
                            <div class="task-time">@task.Time</div>
                        </div>
                    </div>
                }
            </div>

            @* P√ÑIV√Ñ *@
            <div class="time-section">
                <h3 class="time-title">‚òÄÔ∏è P√ÑIV√Ñ (11:00-16:00)</h3>
                @foreach (var task in GetTasksForTimeOfDay("P√ÑIV√Ñ"))
                {
                    <div class="task-item @GetTaskCssClass(task.Type)">
                        <div class="task-icon">@GetTaskIcon(task.Type)</div>
                        <div class="task-details">
                            <div class="task-text">@task.Message</div>
                            <div class="task-time">@task.Time</div>
                        </div>
                    </div>
                }
            </div>

            @* ILTA *@
            <div class="time-section">
                <h3 class="time-title">üåÖ ILTA (16:00-21:00)</h3>
                @foreach (var task in GetTasksForTimeOfDay("ILTA"))
                {
                    <div class="task-item @GetTaskCssClass(task.Type)">
                        <div class="task-icon">@GetTaskIcon(task.Type)</div>
                        <div class="task-details">
                            <div class="task-text">@task.Message</div>
                            <div class="task-time">@task.Time</div>
                        </div>
                    </div>
                }
            </div>

            @* Y√ñ *@
            <div class="time-section">
                <h3 class="time-title">üåô Y√ñ (21:00+)</h3>
                @foreach (var task in GetTasksForTimeOfDay("Y√ñ"))
                {
                    <div class="task-item @GetTaskCssClass(task.Type)">
                        <div class="task-icon">@GetTaskIcon(task.Type)</div>
                        <div class="task-details">
                            <div class="task-text">@task.Message</div>
                            <div class="task-time">@task.Time</div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-tasks">
                <p>Ei teht√§vi√§ merkittyn√§ t√§lle p√§iv√§lle.</p>
                <p>Nauti vapaasta p√§iv√§st√§! üòä</p>
            </div>
        }

        @* T√§rke√§t tapahtumat *@
        @if (!string.IsNullOrEmpty(apiResponse?.ImportantMessage))
        {
            <div class="important-section">
                <h3 class="important-title">‚ö†Ô∏è T√ÑRKE√Ñ√Ñ T√ÑN√Ñ√ÑN</h3>
                <div class="important-message">
                    @apiResponse.ImportantMessage
                </div>
                         </div>
         }
     </div>
</div>
</SwipeContainer>

@code {
    private ReminderApiResponse? apiResponse;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var apiUrl = "https://script.google.com/macros/s/AKfycbwkXUD5k6ISS4obdoQRzA13nuHvmZ_gQxTh602jh9EOsZcxi7oZehGoLlgFdoys9ieCOg/exec?clientID=mom";
            apiResponse = await Http.GetFromJsonAsync<ReminderApiResponse>(apiUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            // Add test data if API fails
            AddTestData();
        }

        // Always add test data if no data exists
        if (apiResponse == null || apiResponse.DailyTasks?.Any() != true)
        {
            AddTestData();
        }
    }

    private void AddTestData()
    {
        if (apiResponse == null)
        {
            apiResponse = new ReminderApiResponse();
        }

        apiResponse.DailyTasks = new List<DailyTask>
        {
            new DailyTask { Date = "T√§n√§√§n", Time = "08:30", Type = "AAMUPALA", Message = "Kumpaakin 1 kpl", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "09:00", Type = "L√Ñ√ÑKKEET", Message = "Aamun lehden lukemista", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "12:00", Type = "LOUNAS", Message = "Ainakin kunnon v√§lipala", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "13:30", Type = "LIIKUNTA", Message = "K√§velylenkki l√§hell√§ tai kaupungilla", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "15:00", Type = "ASIAT", Message = "K√§y kaupassa ja osta mit√§ puuttuu", RequiresAck = false },
            new DailyTask { Date = "T√§n√§√§n", Time = "17:30", Type = "P√ÑIV√ÑLLINEN", Message = "L√§mmin ruoka", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "19:00", Type = "LIIKUNTA", Message = "Pieni iltak√§vely jos s√§√§ sallii", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "20:30", Type = "PUUHAA", Message = "Miten olisi aivojumppa yhdess√§?", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "22:00", Type = "ILTAPALA", Message = "Esim. rahkaa tai jugurttia", RequiresAck = true },
            new DailyTask { Date = "T√§n√§√§n", Time = "22:30", Type = "L√Ñ√ÑKKEET", Message = "Silm√§tipat silmiin", RequiresAck = true }
        };

        apiResponse.ImportantMessage = "13.20 Hammasl√§√§k√§ri Lauttasaaren terveysasemalla";
    }

    private IEnumerable<DailyTask> GetTasksForTimeOfDay(string timeOfDay)
    {
        if (apiResponse?.DailyTasks == null) return Enumerable.Empty<DailyTask>();

        return timeOfDay switch
        {
            "AAMU" => apiResponse.DailyTasks.Where(t => IsTaskForTimeOfDay(t, "AAMU")),
            "P√ÑIV√Ñ" => apiResponse.DailyTasks.Where(t => IsTaskForTimeOfDay(t, "P√ÑIV√Ñ")),
            "ILTA" => apiResponse.DailyTasks.Where(t => IsTaskForTimeOfDay(t, "ILTA")),
            "Y√ñ" => apiResponse.DailyTasks.Where(t => IsTaskForTimeOfDay(t, "Y√ñ")),
            _ => Enumerable.Empty<DailyTask>()
        };
    }

    private bool IsTaskForTimeOfDay(DailyTask task, string timeOfDay)
    {
        if (DateTime.TryParse(task.Time, out var taskTime))
        {
            var hour = taskTime.Hour;
            return timeOfDay switch
            {
                "AAMU" => hour >= 8 && hour < 11,
                "P√ÑIV√Ñ" => hour >= 11 && hour < 16,
                "ILTA" => hour >= 16 && hour < 21,
                "Y√ñ" => hour >= 21 || hour < 8,
                _ => false
            };
        }

        // Fallback: match by task type
        return timeOfDay switch
        {
            "AAMU" => task.Type.Contains("AAMUPALA") || task.Type.Contains("L√Ñ√ÑKKEET") && task.Time.Contains("0"),
            "P√ÑIV√Ñ" => task.Type.Contains("LOUNAS") || task.Type.Contains("LIIKUNTA") || task.Type.Contains("ASIAT"),
            "ILTA" => task.Type.Contains("P√ÑIV√ÑLLINEN") || task.Type.Contains("LIIKUNTA") || task.Type.Contains("PUUHAA"),
            "Y√ñ" => task.Type.Contains("ILTAPALA") || task.Type.Contains("L√Ñ√ÑKKEET") && task.Time.Contains("2"),
            _ => false
        };
    }

    private string GetTaskIcon(string taskType)
    {
        return taskType.ToUpper() switch
        {
            var type when type.Contains("AAMUPALA") => "‚òï",
            var type when type.Contains("LOUNAS") => "üçΩÔ∏è",
            var type when type.Contains("P√ÑIV√ÑLLINEN") => "üçΩÔ∏è",
            var type when type.Contains("ILTAPALA") => "üçΩÔ∏è",
            var type when type.Contains("L√Ñ√ÑKKEET") => "üíä",
            var type when type.Contains("LIIKUNTA") => "üèÉ‚Äç‚ôÄÔ∏è",
            var type when type.Contains("ASIAT") => "üìã",
            var type when type.Contains("PUUHAA") => "üß†",
            _ => "üìù"
        };
    }

    private string GetTaskCssClass(string taskType)
    {
        return taskType.ToUpper() switch
        {
            var type when type.Contains("AAMUPALA") || type.Contains("LOUNAS") || type.Contains("P√ÑIV√ÑLLINEN") || type.Contains("ILTAPALA") => "food-task",
            var type when type.Contains("L√Ñ√ÑKKEET") => "medicine-task",
            var type when type.Contains("LIIKUNTA") => "activity-task",
            var type when type.Contains("ASIAT") => "general-task",
            var type when type.Contains("PUUHAA") => "brain-task",
            _ => "general-task"
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void HandleSwipe(string direction)
    {
        if (direction == "left")
        {
            GoBack();
        }
    }
} 